%!PS-Adobe-3.0
%%Title: (g6lec13.msw)
%%Creator: (Microsoft Word: LaserWriter 8 8.4.2)
%%CreationDate: (0:45 Monday, February 23, 1998)
%%For: ()
%%Pages: 17
%%DocumentFonts: Helvetica Helvetica-Bold Helvetica-Oblique Courier Symbol
%%DocumentNeededFonts: Helvetica Helvetica-Bold Helvetica-Oblique Courier Symbol
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%%DocumentMedia: Default 612 792 0 () ()
%ADO_ImageableArea: 30 31 582 761
%%EndComments
userdict/dscInfo 5 dict dup begin
/Title(g6lec13.msw)def
/Creator(Microsoft Word: LaserWriter 8 8.4.2)def
/CreationDate(0:45 Monday, February 23, 1998)def
/For()def
/Pages 17 def
end put
/md 235 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: lw8_basic-2.0
%%Copyright: Copyright 1990-1996 Adobe Systems Incorporated and Apple Computer Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/framewidth -1 def
/QDframwid -1 def
/numframes Z
/mTS matrix def
/$m matrix def
/av 84 def
/por T def
/normland F def
/psb-nosave{}def
/pse-nosave{}def
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
F
}ifelse
def
/odictstk Z
/oopstk Z
/fcl
{
count oopstk sub dup 0 gt
{
{pop}repeat
}{
pop
}ifelse
countdictstack odictstk sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/sfcl2
{
/odictstk countdictstack store
count/oopstk xs
}bd
/efcl2
{
stopped{$error/newerror F put}if
fcl
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
/devg/DeviceGray def
/devr/DeviceRGB def
/devc/DeviceCMYK def
/ststpgdev{}def
/dopgdev{}def
/stpgdev{}def
/buf Z
/didstop T def
/sfcl
{
/didstop T store
/odictstk countdictstack store
count/oopstk xs
currentfile cvx stopped
{
$error/newerror F put
didstop
{
save/didstop xs
/buf vmstatus exch sub exch pop dup 0 lt{pop 0}if
dup 64000 gt{pop 64000}if string store
{
currentfile buf readline
{
(}efcl)eq{exit}if
}{
/UnexpectedEOF errordict/rangecheck get exec
}ifelse
}loop
didstop restore
}if
}if
fcl
}bd
/efcl
{
/didstop F store
exec
stop
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
/devg[/DeviceGray]def
/devr[/DeviceRGB]def
/devc[/DeviceCMYK]def
/setpagedevice where{pop/realstpgdev/setpagedevice ld}if
/SC_topddict Z
/SC_spdict Z
/dopgdev
{
md/setpagedevice undef
SC_topddict realstpgdev
}bd
/stpgdev
{
SC_topddict dup 3 -1 roll
{
SC_spdict 2 index known
{
SC_spdict 2 index get
dup 3 -1 roll
{
put dup
}forall
pop put dup
}{
put dup
}ifelse
}forall
pop pop
}bd
/ststpgdev
{
md/setpagedevice/stpgdev load put
/SC_topddict 0 dict store
/SC_spdict 3 dict begin
/InputAttributes 0 dict def
/Policies 0 dict def
/OutputAttributes 0 dict def
currentdict
end
store
}def
/sfcl/sfcl2 ld
/efcl/efcl2 ld
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
mT $m currentmatrix mTS concatmatrix pop
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/adjRect
{
dup 2 mul 6 2 roll
4 index sub exch 5 -1 roll sub exch
4 2 roll
4 index add exch 5 -1 roll add exch
4 2 roll
}bd
/frame1up
{
gS
mTS setmatrix
QDframwid lw
/setstrokeadjust where{pop T setstrokeadjust}if
clippath pathbbox
2 index sub exch
3 index sub exch
currentlinewidth framewidth mul
adjRect
numframes dup 0 lt{pop 0}if
{
4 copy
rS
currentlinewidth framewidth
mul 4 mul
adjRect
}repeat
pop pop pop pop
gR
}bd
/$c devr def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: lw8_level1_colorspace-2.0
/G/setgray ld
/:F1/setgray ld
/:F/setrgbcolor ld
/:F4/setcmykcolor where
{
pop
/setcmykcolor ld
}{
{
3
{
dup
3 -1 roll add
dup 1 gt{pop 1}if
1 exch sub
4 1 roll
}repeat
pop
setrgbcolor
}bd
}ifelse
/:Fx
{
counttomark
{0{G}0{:F}{:F4}}
exch get
exec
pop
}bd
/$cs Z
/:rg{devr :ss}bd
/:sc{$cs :ss}bd
/:dc
{
dup type/arraytype eq{0 get}if
dup/DeviceCMYK eq
{
pop devc
}{
/DeviceGray eq
{
devg
}{
devr
}ifelse
}ifelse
/$cs xdf
}bd
/:sgl{}def
/:dr{}bd
/:fCRD{pop}bd
/:ckcs{}bd
/:ss{/$c xdf}bd
%%EndFile
level2 startnoload
%%BeginFile: lw8_level1_patterns-2.0
/patfreq Z
/patangle Z
/bk Z
/fg Z
/docolorscreen Z
/graystring Z
/pattransf{}def
/initQDpatterns
{
/patfreq 9.375 store
/patangle
1 0 $m defaultmatrix dtransform
exch atan
por not
{90 add}if
normland{180 add}if
store
:a
}def
/docolorscreen
/setcolorscreen where
{
pop/currentcolorscreen where
{
pop/setcmykcolor where
{
pop T
}{
F
}ifelse
}{
F
}ifelse
}{
F
}ifelse
def
/setgraypattern
{
/graystring xs
patfreq
patangle
{
1 add
4 mul
cvi
graystring
exch get
exch
1 add 4 mul
cvi
7 sub
bitshift
1 and
}setscreen
64 div setgray
}bd
/:b
{
/pattransf load settransfer
pop pop pop
setgraypattern
}bd
docolorscreen startnoload
/screensave 5 array def
/:a{currentgray currentscreen currenttransfer screensave astore pop}bd
/:e{screensave aload pop settransfer setscreen setgray}bd
/:d
{
pop pop pop
/pattransf load settransfer
setgraypattern 8{pop}repeat
}bd
/:c
/:d ld
docolorscreen endnoload docolorscreen not startnoload
/screensave 20 array def
/:a{currentcmykcolor currentcolorscreen currentcolortransfer screensave astore pop}bd
/:e{screensave aload pop setcolortransfer setcolorscreen setcmykcolor}bd
/rstring Z
/grstring Z
/blstring Z
/convroll{64 div 4 -1 roll}bd
/setcolorpattern
{
/graystring xs
/blstring xs
/grstring xs
/rstring xs
patfreq
patangle
{
1 add 4 mul cvi rstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi grstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi blstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi graystring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
setcolorscreen
convroll convroll convroll convroll
setcmykcolor
}bd
/:d
{
pop pop pop
/pattransf load settransfer
pop pop setcolorpattern
}bd
/:c
/:d ld
docolorscreen not endnoload
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: lw8_level2_patterns-2.0
/pmtx Z
/BGnd Z
/FGnd Z
/PaintData Z
/PatternMtx Z
/PatHeight Z
/PatWidth Z
/$d Z
/savecolor 4 array def
/savecolorspace Z
/patDecode Z
/:a{
mark 0 0 0 currentcolor savecolor astore pop cleartomark
/savecolorspace currentcolorspace store
$c setcolorspace
/patDecode
[currentcolor counttomark
dup 2 add 1
roll
cleartomark[exch
{0 1}repeat]
def
}bd
/:e{
savecolorspace setcolorspace
mark savecolor aload pop setcolor cleartomark
}bd
/initQDpatterns
{
gS
initmatrix
mT dup 4 get exch 5 get :T
1 0 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
0 1 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
neg
scale
0
por not{90 add}if
normland{180 add}if
rotate
matrix currentmatrix
gR
/pmtx xs
:a
}bd
/:t
{
14 dict begin
/BGnd xdf
/FGnd xdf
/PaintData xdf
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PatternMtx[24 0 0 24 0 0]def
/PaintProc
BGnd null ne
{
{
begin
BGnd aload pop :F
0 0 1 1 rF
FGnd aload pop :F
24 24 T PatternMtx PaintData imagemask
end
}
}{
{
begin
FGnd aload pop :F
24 24 T PatternMtx PaintData imagemask
end
}
}ifelse
def
currentdict
PatternMtx
end
$c setcolorspace
gS pmtx setmatrix makepattern gR
}bd
/:u
{
14 dict begin
/$d 8 dict def
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PaintData xdf
/PatHeight xdf
/PatWidth xdf
/PatternMtx[PatWidth 0 0 PatHeight 0 0]def
$d begin
/ImageType 1 def
/MultipleDataSource F def
/Height PatHeight def
/Width PatWidth def
/Decode patDecode def
/ImageMatrix PatternMtx def
/DataSource PaintData def
/BitsPerComponent 8 def
end
/PaintProc
{
begin
$d image
end
}def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/bk[1 1 1]def
/fg[0 0 0]def
/:b{
:t
setpattern
pop pop
}bd
/:d{
:t
setpattern
10{pop}repeat
}bd
/:c{
:u
setpattern
10{pop}repeat
}bd
%%EndFile
level2 not endnoload
%%BeginFile: lw8_uniform_graphics-2.0
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/@c
{
moveto 0 rlineto stroke
}bd
/@w
{
moveto 0 exch rlineto stroke
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: lw8_basic_text-2.0
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg T def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg F store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding dup 9/space put dup 39/quotesingle put 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
/$ckeyd md def
/:skey
{
1 index maxlength 2 index
length sub
ge
{
begin
/$mkeys 20 dict def
/$mkeys load
end
dup/$ckeyd xs
}if
3 1 roll put
}bd
/fD1pass
{
40
$ckeyd
//md
ne
{
pop 1
}if
$ckeyd exch
:skey
}bd
/:searchdict Z
/:searchdict
{
exch 2 copy
known
{
get
}{
exch/$mkeys
get
:searchdict
}ifelse
}bd
/lU
{
//md exch 2 copy
known
{
get
}{
exch
/$mkeys get
:searchdict
}ifelse
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
/fD1pass/def ld
/lU/load ld
level2 not endnoload
/fD Z
/sf Z
/scf Z
/sf1pass
{
lU setfont
}bd
/scf1pass
{
exch lU exch scalefont fD
}bd
/scf2pass
{
scalefont fD
}bd
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff fD
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff fD
}bd
/ps Z
/fz{/ps xs}bd
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
fD
}def
%%EndFile
%%BeginFile: lw8_dashes-2.0
/:q/setdash ld
/:r{
np
:M
:L
stroke
}bd
/nodash[]def
/qdenddash
{
nodash 0 setdash
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if end
%%EndProlog
%%BeginSetup
md begin
/fD/def ld/sf/setfont ld /scf/scf2pass ld
sfcl{
%%BeginFeature: *InputSlot Upper

%%EndFeature


}efcl

sfcl{
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature


}efcl

sfcl{
%%BeginFeature: *PageRegion LetterSmall
level2 {
		2 dict dup /PageSize [612 792] put dup /ImagingBBox [30 31 582 761] put setpagedevice
	}{
		/lettersmall where {pop lettersmall} {letterR} ifelse
	} ifelse
%%EndFeature


}efcl

()setjob
/mT[1 0 0 -1 30 761]def
initQDpatterns
/sD 16 dict def
 600 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Helvetica
/f44/Helvetica
:mre
/f57 f44 10 scf
%%IncludeFont: Helvetica-Bold
/f68/Helvetica-Bold
:mre
/f84 f68 12 scf
/f95 f44 9 scf
/f106 f44 12 scf
%%IncludeFont: Helvetica-Oblique
/f117/Helvetica-Oblique
:mre
/f134 f117 12 scf
%%IncludeFont: Courier
/f154/Courier
:mre
/f166 f154 10 scf
%%IncludeFont: Symbol
/f186/Symbol
:bsr
240/apple pd
:esr
/f198 f186 10 scf
/f209 f44 14 scf
/f220 f186 12 scf
/f231 f154 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(; page: 1 of 17)setjob
%%EndPageSetup
gS 0 0 552 730 rC
78 723 :M
f57 sf
.733 .073(Lecture 1)J
192 723 :M
.284 .028(Advanced Topics in Object-Oriented Systems)J
492 723 :M
.661(193)A
78 51 :M
f84 sf
1.668 .167(Why are black boxes so hard to reuse?)J
f95 sf
0 -3 rm
.401(1)A
0 3 rm
f106 sf
1.011 .101(  I think our field will)J
105 64 :M
.449 .045(go through a revolution.  We will fundamentally change the)J
105 77 :M
.434 .043(way we think about and use abstraction in the engineering of)J
105 90 :M
.041(software.)A
105 117 :M
.166 .017(The goal of this talk is to summarize the need for and the)J
105 130 :M
.287 .029(basic nature of this abstraction framework.)J
105 157 :M
.259 .026(The change is not new problems or new systems, but a new)J
105 170 :M
.4 .04(way of thinking about existing problems and existing systems.)J
105 197 :M
.048 .005(All of this work is a result of a group of us at PARC and)J
105 210 :M
.479 .048(elsewhere on these new ideas of abstraction.)J
105 237 :M
.336 .034(I started programming in high school in Basic on a PDP-11.)J
105 250 :M
.094 .009(After a couple of years, I went off to hack theater lighting)J
105 263 :M
.141(instead.)A
105 290 :M
.462 .046(At engineering school, a crucial idea was that engineers must)J
105 303 :M
.454 .045(master complexity, and that abstraction and decomposition)J
105 316 :M
.246 .025(are the primary tools for doing so.)J
105 343 :M
.336 .034(After a couple of years of mechanical engineering, I tried)J
105 356 :M
.485 .048(computer science again.  The ideas were again abstraction)J
105 369 :M
1.1 .11(and decomposition.)J
78 396 :M
f134 sf
.281 .028(CLOS experience:  )J
f106 sf
.261 .026(Systems got more complex, and they got out of)J
105 409 :M
.334 .033(hand.  The place where \322the rubber really hit the road\323 was)J
105 422 :M
.371 .037(when I started working on CLOS.)J
105 449 :M
.593 .059(The opportunity of working on a high-level programming)J
105 462 :M
.384 .038(language is like going to heaven.  What you\325re going to do is)J
105 475 :M
.357 .036(make a high-level system for your clients that will insulate)J
105 488 :M
.429 .043(them from all the underlying detail.)J
105 515 :M
.079 .008(Not only was I part of the design of CLOS, but I was trying to)J
105 528 :M
.418 .042(do an implementation which ran on top of Common Lisp,)J
105 541 :M
.51 .051(which was also a very high-level abstraction.)J
105 568 :M
.272 .027(This put me in a very interesting position of being both the)J
105 581 :M
.204 .02(customer and provider of my own story.)J
-4126 -4126 -1 1 -4124 -4126 1 -4126 -4127 @a
.24 lw
143.24 78 616.12 @c
78 629 :M
f95 sf
-.096(1)A
f57 sf
0 3 rm
-.092(This talk was given by Gregor Kiczales of Xerox PARC at OOPSLA \32594,)A
0 -3 rm
78 643 :M
.029 .003(10/26/94.   \251 1994, University Video Communications.  A transcript, with point-)J
78 654 :M
-.136(and-click retrieval of the slides,  is available at)A
78 665 :M
f166 sf
.001(http:/www.xerox.com/PARC/spl/eca/oi/gregor-invite/gregor-)A
78 676 :M
(transcript.html)S
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(; page: 2 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f198 sf
.306(\323)A
f57 sf
.772 .077( 1998 Edward F. Gehringer\312\312\312CSC 517/ECE 517 Lecture Notes, Spring 1998)J
522 754 :M
.661(194)A
135 82 :M
f106 sf
.362 .036(You can write an implementation of CLOS on top of Common)J
135 95 :M
.409 .041(Lisp in 10\32020 pages of code.  But mine ended up being 350)J
135 108 :M
-.001(pages.  In order for it to be fast, it had to be that long.)A
135 135 :M
.208 .021(I want the kind of answers about software complexity to do)J
135 148 :M
.138 .014(justice to that kind of problem.  I think the words and)J
135 161 :M
.431 .043(framework of black-box abstraction that we\325ve been using in)J
135 174 :M
.142 .014(the past are part of the origin of that problem.)J
108 201 :M
f134 sf
1.173 .117(Spreadsheet example:)J
f106 sf
.544 .054(  Suppose you\325re going to design the)J
135 214 :M
.631 .063(display portion of a spreadsheet application.)J
135 241 :M
1.07 .107(Functional decomposition:)J
1 G
187 258 201 84 rC
188 259 199 55 rF
0 G
.5 lw
188.5 259.5 198 54 rS
1 G
188 277 100 37 rF
0 G
188.5 277.5 99 36 rS
1 G
188 313 199 28 rF
0 G
188.5 313.5 198 27 rS
1 G
251 295 73 19 rF
0 G
251.5 295.5 72 18 rS
254 297 64 15 rC
255 308 :M
f209 sf
(Language)S
gR
gS 196 282 51 30 rC
197 293 :M
f209 sf
(Window)S
200 308 :M
(system)S
gR
gS 298 270 82 15 rC
300 281 :M
f209 sf
(Spreadsheet)S
gR
gS 232 320 111 15 rC
233 331 :M
f209 sf
(Operating system)S
gR
gS 30 31 552 730 rC
135 366 :M
f106 sf
.391 .039(This functional decomposition is so typical that we have)J
135 379 :M
.364 .036(standardized many of these components: the window system,)J
135 392 :M
.696 .07(programming language, and operating system are)J
135 405 :M
.165(standardized.)A
108 432 :M
f134 sf
.299 .03(Black-box abstraction:  )J
f106 sf
.245 .025(If we look more closely, there\325s a clean)J
135 445 :M
.444 .044(interface that provides functionality; the implementation is)J
135 458 :M
.609 .061(hidden inside a black box.)J
135 485 :M
.438 .044(Inside the window system, it\325s a horrible and complicated)J
135 498 :M
.076 .008(thing.  We want to protect clients of the window system from)J
135 511 :M
-.086(that.)A
135 538 :M
.526 .053(The interface provides useful functionality and \322hides)J
135 551 :M
1.008 .101(implementation details.\323)J
132 568 312 138 rC
1 G
208 569 109 136 rF
0 G
.5 lw
208.5 569.5 108 135 rS
.875 G
208 650 109 55 rF
0 G
208.5 650.5 108 54 rS
.969 G
208 641 109 10 rF
0 G
208.5 641.5 108 9 rS
343 585 96 28 rC
344 595 :M
(Spreadsheet)S
344 609 :M
(implementation)S
gR
gS 343 648 100 28 rC
344 658 :M
f106 sf
(Window-system)S
344 672 :M
(implementation)S
gR
gS 132 568 312 138 rC
np 307 605 :M
320 602 :L
320 605 :L
320 608 :L
307 605 :L
eofill
.5 lw
14.5 320 605.25 @c
np 307 668 :M
320 665 :L
320 668 :L
320 671 :L
307 668 :L
eofill
14.5 320 668.25 @c
133 594 56 42 rC
134 604 :M
f106 sf
(Window-)S
134 618 :M
(system)S
134 632 :M
(interface)S
gR
gS 132 568 312 138 rC
np 206 645 :M
193 642 :L
195 639 :L
196 637 :L
206 645 :L
eofill
181 632.5 -.5 .5 195.5 639 .5 181 632 @a
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(; page: 3 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f57 sf
.733 .073(Lecture 1)J
222 754 :M
.284 .028(Advanced Topics in Object-Oriented Systems)J
522 754 :M
.661(195)A
135 82 :M
f106 sf
.247 .025(The interface is simple.  That code, because it\325s hidden from)J
135 95 :M
.249 .025(the complexities of the window system, is very simple.)J
135 122 :M
.012 .001(Many of us take this for granted.  But it wasn\325t always so.  In a)J
135 135 :M
.333 .033(paper from 1972, \322On the criteria to be used in decomposing)J
135 148 :M
.313 .031(systems into modules,\323 David Parnas says that every module)J
135 161 :M
.51 .051(is characterized by its knowledge of a design decision which)J
135 174 :M
.253 .025(it hides from all others.  This paper introduced the idea of)J
135 187 :M
.209(\322hiding.\323)A
135 214 :M
.323 .032(Everyone knows what a window system is.  Everyone also)J
135 227 :M
.41 .041(knows what kind of functionality the window-system interface)J
135 240 :M
.174 .017(provides.  It provides little boxes that you can put on the)J
135 253 :M
.207 .021(screen, click in, and type in.)J
135 280 :M
.482 .048(So to build a spreadsheet, you should just put 100 windows)J
135 293 :M
.382 .038(on the screen and arrange them.  This would be insulated)J
135 306 :M
.409 .041(from the details of the window implementation.)J
135 333 :M
.511 .051(Spreadsheet is making massive use of the window-system)J
135 346 :M
.144 .014(functionality.  That\325s the good news.  The bad new is that it)J
135 359 :M
.441 .044(probably won\325t work.  Even though the window-system)J
135 372 :M
.512 .051(interface hides the implementation, it comes shining through)J
135 385 :M
.338 .034(in the guise of the window system\325s performance.)J
135 412 :M
.319 .032(Not all of the aspects of the implementation were really)J
135 425 :M
.296 .03(details.  A number of them were really )J
f134 sf
.666 .067(mapping dilemmas)J
f106 sf
(,)S
135 438 :M
.306 .031(strategy questions that affect performance differentially,)J
135 451 :M
.312 .031(depending on client patterns of use.  \(E.g., sub-window at)J
135 464 :M
.739 .074(position absolute screen coordinates.\))J
135 491 :M
.271 .027(In this case, implementor of window system has to decide\321)J
148 518 :M
(\245)S
162 518 :M
.673 .067(whether windows should be a heavyweight data)J
162 531 :M
.224 .022(structure that memorize a lot of internal values,)J
148 551 :M
(\245)S
162 551 :M
.446 .045(and whether the mouse tracking should be based on a)J
162 564 :M
.479 .048(general sense of geometry,)J
148 584 :M
.336(or)A
148 604 :M
(\245)S
162 604 :M
.62 .062(whether windows should be lightweight data structures)J
148 624 :M
(\245)S
162 624 :M
.351 .035(and mouse tracking should try to optimize for regular)J
162 637 :M
.083(geometry.)A
135 664 :M
.45 .045(Window implementors almost always choose the former.)J
135 677 :M
.251 .025(That\325s why you can\324t write the spreadsheet this way.)J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(; page: 4 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f198 sf
.306(\323)A
f57 sf
.772 .077( 1998 Edward F. Gehringer\312\312\312CSC 517/ECE 517 Lecture Notes, Spring 1998)J
522 754 :M
.661(196)A
135 82 :M
f106 sf
.662 .066(What happens when you implement a higher-level)J
135 95 :M
.301 .03(functionality \(e.g., window-system interface\) on top of a lower-)J
135 108 :M
.433 .043(level functionality is that you take the higher-level)J
135 121 :M
.334 .033(functionality and you have to \322map it down\323 onto the lower-)J
135 134 :M
.449 .045(level functionality; that\325s the \322mapping.\323)J
135 161 :M
.258 .026(The sense of \322dilemma\323 is that the implementor has a)J
135 174 :M
.369 .037(dilemma: if \(s\)he chooses one way, some clients will be)J
135 187 :M
.254 .025(happy, & if he chooses the other way, other clients will be)J
135 200 :M
.197(happy.)A
135 227 :M
f134 sf
.372 .037(Mapping dilemmas: Two more terms.)J
148 254 :M
f106 sf
(\245)S
162 254 :M
.618 .062(mapping decision: a decision that an implementor)J
162 267 :M
.575 .058(makes about a mapping dilemma.)J
148 287 :M
(\245)S
162 287 :M
.565 .056(mapping conflict: implementor\325s decision vs. client)J
162 300 :M
.46 .046(preference.  Implementor made a mapping decision that)J
162 313 :M
.269 .027(is not the one that client prefers, client\325s code doesn\325t)J
162 326 :M
.486 .049(run as desired.)J
135 353 :M
f134 sf
.461 .046(Mapping dilemmas: Key point.)J
f106 sf
.286 .029(  The abstraction barrier )J
f134 sf
.114(locks)A
135 366 :M
.108(in)A
f106 sf
.448 .045( but doesn\325t really hide mapping decisions.  That can lead)J
135 379 :M
.412 .041(to mapping conflicts.)J
135 406 :M
.312 .031(Is this example extreme?)J
148 433 :M
(\245)S
162 433 :M
.167 .017(Maybe it is a little extreme, but the rhetoric of black-box)J
162 446 :M
.474 .047(abstraction that we teach in Computer Science 101)J
162 459 :M
.365 .036(doesn\325t account for this example.)J
148 479 :M
(\245)S
162 479 :M
.297 .03(It sure is a shame, because a slightly different window)J
162 492 :M
.319 .032(system would have allowed itself to be used in this way.)J
148 512 :M
(\245)S
162 512 :M
.278 .028(I have some less extreme examples.)J
179 536 :M
cF
f220 sf
(\260)S
setfont
193 534 :M
.19 .019(Virtual memory.  It is a canonical example of this)J
193 548 :M
.208 .021(sort of problem.  Everyone knows what the)J
193 562 :M
.238 .024(abstraction is: Lots of memory, directly accessible.)J
193 576 :M
-.107(Client can \()A
f231 sf
-.153(malloc)A
f106 sf
-.071(, )A
f231 sf
-.153(read)A
f106 sf
-.071(, )A
f231 sf
-.153(write)A
f106 sf
-.071(, )A
f231 sf
-.153(free)A
f106 sf
-.155(\).)A
193 597 :M
.506 .051(Dilemmas: Page-replacement policy.  Most)J
193 611 :M
.493 .049(implementors choose LRU replacement, and this)J
193 625 :M
.052 .005(is right for most clients.)J
193 646 :M
.192 .019(But there are some clients, e.g., database)J
193 660 :M
.285 .029(programs, that would like more MRU, because the)J
193 674 :M
.229 .023(database makes random accesses to part of its)J
193 688 :M
.525 .053(memory, while doing sequential accesses to other)J
193 702 :M
(parts of memory.)S
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(; page: 5 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f57 sf
.733 .073(Lecture 1)J
222 754 :M
.284 .028(Advanced Topics in Object-Oriented Systems)J
522 754 :M
.661(197)A
193 84 :M
f106 sf
.307 .031(Any program that spreads its working set around is)J
193 98 :M
.587 .059(in trouble \(also graphics, garbage collectors\).)J
193 119 :M
.531 .053(The graphics application walks through a bunch of)J
193 133 :M
.309 .031(data structures, displaying them on the screen.)J
193 154 :M
.19 .019(If the data structures happen to be laid out in)J
193 168 :M
.34 .034(memory wrong, and the prefetching policy of the)J
193 182 :M
.312 .031(VM doesn\325t line up with what the graphics system)J
193 196 :M
.185 .019(wanted, it is a serious problem.  Most)J
193 210 :M
.326 .033(programmers just buy more memory.)J
179 233 :M
cF
f220 sf
(\260)S
setfont
193 231 :M
.727 .073(Example: Programming languages.  Procedural)J
193 245 :M
.677 .068(abstraction hides a serious mapping dilemma\321)J
193 259 :M
.564 .056(whether procedures should be called in line or out)J
193 273 :M
.348 .035(of line.  There are performance-critical cases)J
193 287 :M
.391 .039(where this decision can really affect whether the)J
193 301 :M
.47 .047(client can use the procedural abstraction.)J
179 324 :M
cF
f220 sf
(\260)S
setfont
193 322 :M
.418 .042(Scientific computing: How to map the arrays?)J
193 343 :M
.466 .047(On a uniprocessor, how should it be blocked?)J
193 364 :M
.421 .042(On a parallel processor, how should it be)J
193 378 :M
.242(implemented?)A
193 399 :M
.304 .03(These decisions affect client\324s ability to use the)J
193 413 :M
.247 .025(abstraction of an array.)J
135 439 :M
.124 .012(I don\325t think this is just an abstract or theoretical problem.  I)J
135 452 :M
.253 .025(think that examples just like these lead to a great deal of)J
135 465 :M
.134 .013(complexity in our current systems.  Of the 300 pages of code)J
135 478 :M
.258 .026(in CLOS, I think a couple hundred of them are due to these)J
135 491 :M
.447 .045(kinds of problems.)J
108 518 :M
f134 sf
.414 .041(Two categories of problems:)J
148 545 :M
f106 sf
(\245)S
162 545 :M
.447 .045(Hematomas of duplication.  Everyone knows how you)J
162 558 :M
.44 .044(would deal with the spreadsheet case.  You would make)J
162 571 :M
.39 .039(one big window, and draw a bunch of vertical &)J
162 584 :M
.59 .059(horizontal lines.  You would duplicate functionality,)J
162 597 :M
.508 .051(implement your own window system.)J
162 617 :M
.315 .032(People have done this often to get the right performance)J
162 630 :M
(tradeoffs.)S
148 650 :M
(\245)S
162 650 :M
.55 .055(\322Coding between the lines\323: In garbage collector,)J
162 663 :M
.543 .054(compiler, graphics, people rewrite code over and over)J
162 676 :M
.339 .034(again till their objects are laid out in memory in such a)J
162 689 :M
.117 .012(way that the paging system works for them.)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(; page: 6 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f198 sf
.306(\323)A
f57 sf
.772 .077( 1998 Edward F. Gehringer\312\312\312CSC 517/ECE 517 Lecture Notes, Spring 1998)J
522 754 :M
.661(198)A
162 82 :M
f106 sf
.329 .033(Causes code to be contorted.  This also happens in)J
162 95 :M
.471 .047(garbage-collection systems when you do a great deal of)J
162 108 :M
.16 .016(contortion to conform to the virtual memory.)J
135 135 :M
.253 .025(This is particularly a problem in systems that are used by)J
135 148 :M
.171 .017(multiple clients.  If, e.g., the window system is being used by)J
135 161 :M
.194 .019(only one client, it\324s very easy for it to be properly tuned.)J
135 188 :M
f134 sf
.337 .034(Stressed by multiple clients:  )J
f106 sf
.424 .042(But when another client comes)J
135 201 :M
.393 .039(along, like a spreadsheet, it wants a different mapping)J
135 214 :M
.206 .021(decision.  It gets worse as the number of clients increases.)J
135 241 :M
.284 .028(\322Multiple clients\323 is just another word for reuse.  These clients)J
135 254 :M
.296 .03(are having a hard time reusing the system because of the)J
135 267 :M
.29 .029(mapping conflicts.  If we are interested in reuse, we should)J
135 280 :M
.339 .034(take this seriously.)J
135 307 :M
.295 .029(As an indication of how serious the problem is, one of the)J
135 320 :M
.292 .029(major database vendors says that 35% of their products is)J
135 333 :M
.382 .038(code to deal with hematomas, the various mapping conflicts,)J
135 346 :M
.149 .015(as they try to live on multiple platforms.)J
135 373 :M
.383 .038(Others have noticed these problems before.  Mary Shaw and)J
135 386 :M
.294 .029(Bill Wulf noticed these problems in 1980.  In their paper,)J
135 399 :M
.692 .069(\322Toward relaxing assumptions in languages and their)J
135 412 :M
.588 .059(implementations,\323 \()J
f134 sf
.588 .059(SIGPlan Notices)J
f106 sf
.341 .034( 15:3, March 1980\) they)J
135 425 :M
(say,)S
144 451 :M
f57 sf
.017 .002(\322Traditionally, the designers and implementors of programming)J
144 462 :M
-.016(languages have made a number of decisions about the nature and)A
144 473 :M
-.003(representation of various language features that the authors feel are)A
144 484 :M
.617 .062(unnecessarily pre-emptive.\323)J
135 507 :M
f106 sf
.155 .016(\322Pre-emptive\323 is their way of expressing the effects of the)J
135 520 :M
.34 .034(mapping problem.  They are saying that if the implementor)J
135 533 :M
.31 .031(makes one decision, and it\325s not the one that client needs,)J
135 546 :M
.297 .03(then the client is pre-empted from being able to use the)J
135 559 :M
.13 .013(service the way that they [sic] would like to.)J
135 586 :M
.569 .057(They continue,)J
144 612 :M
f57 sf
1.408 .141(\322Both the designer and implementor have only notions of typical use)J
144 623 :M
1.416 .142(available; they are making the decisions too soon. \311 Although most)J
144 634 :M
.618 .062(people now agree that the use of high-level languages is desirable, the)J
144 645 :M
2.027 .203(fact remains that many major systems are still written in assembly)J
144 656 :M
.196(language.\323)A
135 681 :M
f106 sf
.092 .009(Of course, that is still true today, although the syntax is worse,)J
135 694 :M
.416 .042(and now it\325s an ANSI standard.)J
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(; page: 7 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f57 sf
.733 .073(Lecture 1)J
222 754 :M
.284 .028(Advanced Topics in Object-Oriented Systems)J
522 754 :M
.661(199)A
108 82 :M
f134 sf
.146 .015(Summary of talk so far:)J
f106 sf
.119 .012(  We are engineers, and our chief task is to)J
135 95 :M
.594 .059(control complexity.)J
135 122 :M
.194 .019(The basic tools that we use to do that are abstraction and)J
135 135 :M
.178(decomposition.)A
135 162 :M
.362 .036(In our discipline to date, we have tried a particular abstraction)J
135 175 :M
.367 .037(framework, called black-box abstraction, which attempts to)J
135 188 :M
.747 .075(expose functionality and hide implementation.)J
135 215 :M
.637 .064(We\325ve run into problems, because mapping decisions)J
135 228 :M
.394 .039(nonetheless show through.  That leads to hematomas and)J
135 241 :M
.408 .041(coding between the lines in clients of these abstractions.)J
135 268 :M
.373 .037(The fundamental problem is that clients need control over the)J
135 281 :M
1.226 .123(mapping decisions.)J
135 308 :M
.282 .028(So, one way or another, we\325ve got to find some other)J
135 321 :M
.752 .075(approach than hiding the implementation.)J
108 348 :M
f134 sf
.138 .014(What to do about it: )J
f106 sf
.166 .017(  Here are five possibilities.)J
148 375 :M
(\245)S
162 375 :M
f134 sf
.462 .046(Document the mapping decisions.)J
f106 sf
.257 .026(  That won\325t work.)J
162 388 :M
.368 .037(Just knowing that something isn\325t what you want doesn\325t)J
162 401 :M
.176 .018(make it do what you want.)J
148 421 :M
(\245)S
162 421 :M
f134 sf
.147 .015(\322Here\325s the sources; have fun!\323)J
f106 sf
.082 .008(  I don\325t think I need to talk)J
162 434 :M
.325 .033(much about that plan.)J
148 454 :M
(\245)S
162 454 :M
f134 sf
.19 .019(Give up.)J
148 474 :M
f106 sf
(\245)S
162 474 :M
f134 sf
.475 .048(Avoid mapping dilemmas.)J
f106 sf
.259 .026(  Design systems that are so)J
162 487 :M
.561 .056(low level that their implementation presents no mapping)J
162 500 :M
.168(dilemmas.)A
148 520 :M
(\245)S
162 520 :M
f134 sf
.199 .02(Pretend it isn\325t a problem.)J
f106 sf
.181 .018(  Design systems that have the)J
162 533 :M
.478 .048(desired functionality, whether or not they have mapping)J
162 546 :M
.136 .014(dilemmas.  You might find that to be an odd contrast, but)J
162 559 :M
.204 .02(if you turn to a 1974 paper by a very famous person)J
162 572 :M
.27 .027(\(Niklaus Wirth, Information Processing \32574\), \322On the)J
162 585 :M
.854 .085(design of programming languages,\323)J
180 604 :M
f57 sf
-.071(\322In fact, I found that a large number of programs perform poorly)A
180 615 :M
.179 .018(because of the language\325s tendency to hide \324what\325s going on,\325)J
180 626 :M
.235 .023(with the misguided intention of \324not bothering the programmer)J
180 637 :M
.094 .009(with details.\325\323)J
162 660 :M
f106 sf
.347 .035(This is a very compelling paper, but basically what it)J
162 673 :M
.482 .048(ends up saying is that we should design languages that)J
162 686 :M
.398 .04(are so low level that they have no mapping dilemmas.)J
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(; page: 8 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f198 sf
.306(\323)A
f57 sf
.772 .077( 1998 Edward F. Gehringer\312\312\312CSC 517/ECE 517 Lecture Notes, Spring 1998)J
522 754 :M
.661(200)A
162 82 :M
f106 sf
.211 .021(This is the origin of languages like C.  I was a Lisp guy,)J
162 95 :M
.281 .028(and when I saw this paper, I was shocked because the)J
162 108 :M
.353 .035(Lisp community took the second approach, \322Pretend it)J
162 121 :M
.192 .019(isn\325t a problem.\323  They said, We\325ll put the right)J
162 134 :M
.419 .042(functionality into the language, and figure out how to)J
162 147 :M
.15 .015(implement it later on.  I think the market has chosen)J
162 160 :M
.287 .029(about what choice was right for the time being.)J
135 187 :M
.428 .043(Given a lack of understanding of the mapping dilemma, and)J
135 200 :M
.251 .025(the lack of a clear solution, the \322pretend it isn\325t a problem\323)J
135 213 :M
.236 .024(might have been the right approach.  But maybe by the end of)J
135 226 :M
.3 .03(this talk, we\325ll have a better solution.)J
108 253 :M
f134 sf
.485 .048(Previous approaches to tackling the problem:)J
f106 sf
.382 .038(  In programming)J
135 266 :M
.575 .058(languages, there are compiler switches or compiler pragmas)J
135 279 :M
.757 .076(or compiler declarations.)J
148 306 :M
(\245)S
162 306 :M
.192 .019(In C, for example, there is an in-line switch for)J
162 319 :M
.165(procedures.)A
148 339 :M
(\245)S
162 339 :M
.219 .022(In high-performance Fortran, there is a switch that tells)J
162 352 :M
.304 .03(the compiler how to resolve the dilemma of how to lay)J
162 365 :M
.158 .016(the array out in memory.)J
148 385 :M
(\245)S
162 385 :M
.501 .05(A number of window systems provide \322lightweight)J
162 398 :M
.692 .069(windows\323 that would basically allow the spreadsheet)J
162 411 :M
.277 .028(program a way to work)J
135 438 :M
.423 .042(These solutions do address the problem of giving the client)J
135 451 :M
.554 .055(program control over the mapping dilemma.)J
148 478 :M
(\245)S
162 478 :M
1.072 .107(Procedure implementation.)J
148 491 :M
(\245)S
162 491 :M
.3 .03(Array layout.)J
148 504 :M
(\245)S
162 504 :M
.71 .071(Windowing strategy.)J
135 530 :M
.474 .047(This allows some hematomas and coding between the line to)J
135 543 :M
.986 .099(be avoided.)J
135 570 :M
.351 .035(The declarative nature of these mechanisms makes them)J
135 583 :M
.328 .033(very reliable, but of limited power, because the client has to)J
135 596 :M
.205 .021(choose from among a fixed set of alternatives to control the)J
135 609 :M
1.199 .12(mapping dilemma.)J
135 636 :M
.324 .032(Let\325s look at a different solution to the virtual-memory problem)J
135 649 :M
.22 .022(that is based to some extent on object-oriented techniques.  It)J
135 662 :M
.225 .023(started pretty much with work on the Mach external paper,)J
135 675 :M
.308 .031(which is presented in this paper by Young et al., which is pre-)J
135 688 :M
.293 .029(sented in this work, \322The duality of memory and communica-)J
135 701 :M
.431 .043(tion in a multi-processor operating system,\323 SOSP \32587:)J
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(; page: 9 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f57 sf
.733 .073(Lecture 1)J
222 754 :M
.284 .028(Advanced Topics in Object-Oriented Systems)J
522 754 :M
.661(201)A
180 81 :M
.118 .012(\322An important component of the Mach design is the use of)J
180 92 :M
-.084(memory objects which \311 allows applications \311 to participate in)A
180 103 :M
.108 .011(decisions regarding secondary-storage management and page)J
180 114 :M
.157(replacement.\323)A
135 140 :M
f106 sf
.37 .037(They let the client in to control the mapping decisions using)J
135 153 :M
.842 .084(some object-oriented techniques.)J
135 180 :M
f134 sf
.32 .032(Virtual memory:)J
f106 sf
.161 .016(  In a traditional virtual memory, there is the)J
135 193 :M
-.039(interface of )A
f231 sf
-.058(malloc)A
f106 sf
-.027(, )A
f231 sf
-.058(read)A
f106 sf
-.04(, and )A
f231 sf
-.058(write)A
f106 sf
-.044(, and below that,)A
135 206 :M
.736 .074(everything\325s hidden in a black-box implementation.)J
135 233 :M
.445 .045(The implementation maps that interface onto physical)J
135 246 :M
.438 .044(memory pages and disk drives.)J
135 273 :M
.311 .031(Inside the box, there is an amorphous hunk of code and data)J
135 286 :M
.355 .035(that implement the mapping, and then there is a page table)J
135 299 :M
.145 .015(that tells the system for each address where the memory is.)J
135 326 :M
.308 .031(The problem that is being solved is to give the client control)J
135 339 :M
.768 .077(over page-replacement policy and mechanism.)J
135 366 :M
.481 .048(One solution would be multiple copies of the virtual-memory)J
135 379 :M
.271 .027(kernel, so that some parts of memory would be controlled by)J
135 392 :M
.356 .036(one, and some by another.)J
135 419 :M
.232 .023(That solves the problem in a theoretical sense, but it is a pain,)J
135 432 :M
.291 .029(because it means that a client has to duplicate the entire)J
135 445 :M
.201 .02(implementation to get a different kind of VM.)J
135 472 :M
.232 .023(In Mach, they made each region of memory into an object.)J
148 499 :M
(\245)S
162 499 :M
.703 .07(The protocol provides implementation.)J
148 519 :M
(\245)S
162 519 :M
.628 .063(OOP provides inheritance and overriding.)J
135 546 :M
.267 .027(There is a default class of region-of-memory objects that)J
135 559 :M
.45 .045(implements operations like )J
f231 sf
.127(malloc)A
f106 sf
.424 .042( and determines which)J
135 572 :M
.294 .029(page to flush.)J
135 599 :M
.208 .021(If a client wants a new implementation of virtual memory, it)J
135 612 :M
.302 .03(just subclasses that class and recode the one operation that it)J
135 625 :M
.371 .037(wants to change.)J
135 652 :M
.237 .024(In a 1993 OOPSLA paper, Krueger et al. showed that in a)J
135 665 :M
.235 .023(very small amount of code, you can make a virtual memory)J
135 678 :M
.403 .04(that uses an MRU page-replacement policy.)J
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(; page: 10 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f198 sf
.306(\323)A
f57 sf
.772 .077( 1998 Edward F. Gehringer\312\312\312CSC 517/ECE 517 Lecture Notes, Spring 1998)J
522 754 :M
.661(202)A
135 82 :M
f106 sf
.271 .027(These are examples of systems that provide clients with)J
135 95 :M
.718 .072(control over mapping decisions.)J
148 122 :M
(\245)S
162 122 :M
.714 .071(Languages provide this control.)J
148 142 :M
(\245)S
162 142 :M
.342 .034(Operating systems provide clients with control of virtual)J
162 155 :M
.254 .025(memory, etc.  There has recently been an explosion of)J
162 168 :M
.397 .04(work on systems like Apertos, Scheduler Activations, all)J
162 181 :M
.552 .055(giving clients control of some mapping decisions.)J
148 201 :M
(\245)S
162 201 :M
.578 .058(Many class libraries available in o-o community also)J
162 214 :M
.243 .024(have this same kind of property.)J
135 241 :M
.695 .07(Mapping dilemmas are important when you have high-level)J
135 254 :M
.24 .024(functionality \(lots of mapping to do\) that needs to be efficient)J
135 267 :M
.434 .043(\(the dilemma is serious\).)J
135 294 :M
.316 .032(An important paper is the one that introduces)J
135 307 :M
.928 .093(policy/mechanism separation \(\322Policy/mechanism separation)J
135 320 :M
.071 .007(in Hydra,\323 R. Levin et al., SOSP \32575\).  The first sentence is,)J
144 346 :M
f57 sf
.049 .005(\322The extent to which resource allocation policies are entrusted to user-)J
144 357 :M
-.011(level software determines in large part the degree of flexibility present in)A
144 368 :M
.219 .022(an operating system.\323)J
135 391 :M
f106 sf
.293 .029(That sentence is another way of saying that clients need)J
135 404 :M
.718 .072(control over mapping decisions.)J
135 431 :M
.334 .033(So, what we have said is that earlier systems perhaps hid a)J
135 444 :M
.385 .039(little too much, because clients lost control over mapping)J
135 457 :M
.184(decisions.)A
135 484 :M
.436 .044([Video of Tacoma Narrows Bridge collapse.])J
135 511 :M
.182 .018(Bridge was built in 1940.  At the time, they used an)J
135 524 :M
.596 .06(abstraction framework which ignored the dynamic properties)J
135 537 :M
.203 .02(of structures like this.  They knew that dynamic properties had)J
135 550 :M
.373 .037(been important, but they decided that they could be ignored.)J
135 563 :M
.168 .017(On Nov. 7, 1940, it got windy in the wrong way, and the)J
135 576 :M
1.273 .127(bridge collapsed.)J
135 603 :M
.501 .05(So, even a much older discipline can pick an abstraction)J
135 616 :M
.192 .019(framework that doesn\325t capture all of what matters.)J
135 643 :M
f134 sf
.257 .026(Where are we now?)J
f106 sf
.2 .02(  We started out with the black-box)J
135 656 :M
.262 .026(abstraction, but found that we had to give clients control over)J
135 669 :M
.174 .017(mapping decision.  We have seen some systems that try to do)J
135 682 :M
.332 .033(this in various ways.)J
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(; page: 11 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f57 sf
.733 .073(Lecture 1)J
222 754 :M
.284 .028(Advanced Topics in Object-Oriented Systems)J
522 754 :M
.661(203)A
135 82 :M
f106 sf
.681 .068(However, the original motivation for hiding implementation)J
135 95 :M
.285 .028(was controlling the complexity presented to clients.  If we now)J
135 108 :M
.417 .042(expose some of this implementation to allow control over)J
135 121 :M
.606 .061(mapping decisions, clients may again have trouble.)J
135 148 :M
.397 .04(Giving clients control: the problem.)J
148 175 :M
(\245)S
162 175 :M
.578 .058(Adding client control re-introduces complexity \(which is)J
162 188 :M
.217 .022(what we were trying to hide in the first place\).)J
148 208 :M
(\245)S
162 208 :M
.085 .008(\322If you can\325t conquer, at least divide.\322  We tried to)J
162 221 :M
.312 .031(conquer implementation, but it didn\325t quite work.  But, all)J
162 234 :M
.295 .03(by itself, this principle doesn\325t say much more than use)J
162 247 :M
.09(abstraction.)A
148 267 :M
(\245)S
162 267 :M
.33 .033(But divide from what?)J
108 294 :M
f134 sf
.209 .021(Base/meta separation:  )J
f106 sf
.146 .015(I think we can learn from the the)J
135 307 :M
.24 .024(community that works on computational reflection.  This is the)J
135 320 :M
.18 .018(design of systems that have interfaces that need to be)J
135 333 :M
.264 .026(renegotiated.  Like OOP, it is based on observation about the)J
135 346 :M
.277 .028(world, and claims that we can use that observation as a)J
135 359 :M
.44 .044(metaphor for designing systems.)J
135 386 :M
.319 .032(It is based on the observation that people in the world)J
135 399 :M
.351 .035(renegotiate their contracts, sometimes very explicitly.)J
135 426 :M
.309 .031(Day-to-day discourse is governed by contracts, e.g., about)J
135 439 :M
.235 .023(the delivery of widgets \(what a widget is, how long it takes to)J
135 452 :M
.236 .024(build, etc.\).  \322We need 1000 more widgets.\323)J
135 479 :M
.285 .029(Occasionally, contract needs to be renegotiated.  On these)J
135 492 :M
.21 .021(occasions, discourse is about the contract.  Reflective)J
135 505 :M
.365 .037(community calls this \322going meta.\323)J
135 532 :M
.206 .021(One thing that the reflective community has given us is this)J
135 545 :M
.237 .024(notion of a reflective module.  In such a module,)J
148 572 :M
(\245)S
162 572 :M
.48 .048(the basic interface provides day-to-day functionality.)J
148 592 :M
(\245)S
162 592 :M
.265 .026(the meta interface gives control over the base interface.)J
135 619 :M
.604 .06(Base/meta is separation principle; separation )J
f134 sf
.239(and)A
135 632 :M
f106 sf
1.084 .108(coordination implementation techniques.)J
135 659 :M
.19 .019(All of us know that our friends who \322go meta\323 all the time are)J
135 672 :M
.223 .022(somewhat of a pain, and it would be better if they did it only)J
135 685 :M
(some of the time.)S
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(; page: 12 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f198 sf
.306(\323)A
f57 sf
.772 .077( 1998 Edward F. Gehringer\312\312\312CSC 517/ECE 517 Lecture Notes, Spring 1998)J
522 754 :M
.661(204)A
135 82 :M
f134 sf
.352 .035(Basic design goal:)J
f106 sf
.24 .024(  Given this notion of reflective module, I)J
135 95 :M
.212 .021(want to give a basic design goal for these systems that)J
135 108 :M
.537 .054(present clients with control over mapping decisions.)J
135 135 :M
.636 .064(\322Hiding implementation\323 is replaced by \322)J
f134 sf
.152(separating)A
f106 sf
.627 .063( control)J
135 148 :M
.389 .039(over mapping decisions.\323  Goal is to allow programmer to)J
135 161 :M
.376 .038(program optimistically on top of window system, virtual)J
135 174 :M
.9 .09(memory, programming language.)J
135 201 :M
.424 .042(Another interface, as much as possible separate, should)J
135 214 :M
.392 .039(allow them to adjust mapping decisions to meet optimism.)J
135 241 :M
.378 .038(Allow client programmer to alternately focus attention \(mostly\))J
135 254 :M
.299 .03(on one program or the other.)J
135 281 :M
.181 .018(Let\325s try to apply base/meta separation to some of the)J
135 294 :M
.763 .076(examples we\325ve seen.)J
148 321 :M
(\245)S
162 321 :M
.731 .073(The two programming-language examples \(C and High-)J
162 334 :M
.616 .062(Performance Fortran\) already provide good separation.)J
162 347 :M
.45 .045(Base and meta can be read and understood)J
162 360 :M
.228(independently.)A
148 380 :M
(\245)S
162 380 :M
.17 .017(The same holds for the virtual-memory system from)J
162 393 :M
.437 .044(above.  The program for changing the paging policy can)J
162 406 :M
.139 .014(really very much be put off to the side from the program)J
162 419 :M
.184 .018(that uses virtual memory.)J
135 446 :M
.273 .027(Here\325s a slide borrowed from Taligent.  It has base/meta)J
135 459 :M
.165(separation.)A
148 486 :M
(\245)S
162 486 :M
.297 .03(Client \(base\) API provides services.  Looks like a class)J
162 499 :M
.163 .016(library.  Instantiate and use.  Your code calls it.)J
148 519 :M
(\245)S
162 519 :M
.245 .025(Framework API.  Provides customizability.  Looks like an)J
162 532 :M
.442 .044(o-o design.  Subclass and override.  Calls your code.)J
135 559 :M
.327 .033(Now let\325s go back to window-system example.  Here the)J
135 572 :M
.526 .053(base/meta separation wasn\325t so good.)J
135 599 :M
.493 .049(Before, we had a function called make-lightweight-text-)J
135 612 :M
.399 .04(window.  The meta concern of how the mapping dilemma)J
135 625 :M
.602 .06(should be resolved had been confounded with the base)J
135 638 :M
.196 .02(concern that this was a text window.  In addition, there is also)J
135 651 :M
.376 .038(a problem of combinatorial explosion.  If you have a number)J
135 664 :M
.253 .025(of meta concerns and a number of base concerns, you get an)J
135 677 :M
.685 .069(explosion in name space.)J
135 704 :M
.51 .051(Separate base and meta namespaces.  Avoids name)J
135 717 :M
.415 .041(explosion \(it is easier to adjust meta independently of base\).)J
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(; page: 13 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f57 sf
.733 .073(Lecture 1)J
222 754 :M
.284 .028(Advanced Topics in Object-Oriented Systems)J
522 754 :M
.661(205)A
135 82 :M
f106 sf
.236 .024(At this year\325s OOPSLA, there is a paper by Lortz and Shin)J
135 95 :M
.37 .037(that gives a number of examples of achieving base/meta)J
135 108 :M
.209 .021(separation.  Here the class )J
f231 sf
.081(set)A
f106 sf
.231 .023( is clearly separated from)J
135 121 :M
.551 .055(client control over the mapping decision.)J
135 148 :M
.42 .042(Let me talk now about a few additional design goals.)J
148 175 :M
(\245)S
162 175 :M
.271 .027(Incrementality: Deltas from a good default.  \(Clients)J
162 188 :M
.383 .038(would like to write as little code as possible to change)J
162 201 :M
1.185 .119(mapping decisions.\))J
148 221 :M
(\245)S
162 221 :M
.09 .009(Scope control: What is affected.  \(If client uses meta)J
162 234 :M
.477 .048(interface to change a mapping decision, it should be)J
162 247 :M
.3 .03(able to bound the scope of the change, e.g., change)J
162 260 :M
.291 .029(how a single array is laid out, not all arrays.\))J
:a
0(\377\377\377\377\377\377\377\377)(\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377)fg bk
:b
177 270 261 145 rC
.5 lw
[1
3
] 0 :q
268 376 268 295 :r
[] 0 :q
268 376 :M
psb
pse
:e
0 G
:a
0(\377\377\377\377\377\377\377\377)(\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377)fg bk
:b
1 lw
[1
3
] 0 :q
286 376 286 295 :r
[] 0 :q
286 376 :M
psb
pse
.5 lw
[1
3
] 0 :q
304 376 304 295 :r
[] 0 :q
304 376 :M
psb
pse
:e
0 G
:a
0(\377\377\377\377\377\377\377\377)(\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377)fg bk
:b
[1
3
] 0 :q
322 376 322 295 :r
[] 0 :q
322 376 :M
psb
pse
:e
0 G
:a
0(\377\377\377\377\377\377\377\377)(\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377)fg bk
:b
[1
3
] 0 :q
340 376 340 295 :r
[] 0 :q
340 376 :M
psb
pse
:e
0 G
:a
0(\377\377\377\377\377\377\377\377)(\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377)fg bk
:b
[1
3
] 0 :q
358 376 358 295 :r
[] 0 :q
358 376 :M
psb
pse
:e
0 G
:a
0(\377\377\377\377\377\377\377\377)(\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377)fg bk
:b
[1
3
] 0 :q
394 313 250 313 :r
[] 0 :q
394 313 :M
psb
pse
:e
0 G
:a
0(\377\377\377\377\377\377\377\377)(\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377)fg bk
:b
1 lw
[1
3
] 0 :q
394 331 250 331 :r
[] 0 :q
394 331 :M
psb
pse
.5 lw
[1
3
] 0 :q
394 349 250 349 :r
[] 0 :q
394 349 :M
psb
pse
:e
0 G
2 lw
250 295 144 81 rS
185 271 117 14 rC
186 281 :M
(OO for Scope Control)S
gR
gS 205 307 36 12 rC
212 316 :M
f57 sf
-.177(malloc)A
gR
gS 178 325 63 12 rC
183 334 :M
1.655 0 rm
f57 sf
(page-to-flush)S
gR
gS 186 343 55 12 rC
197 352 :M
.54 0 rm
f57 sf
(load-page)S
gR
.5 lw
gS 177 270 261 145 rC
90 180 36 27 286.5 394 @n
np 268 380 :M
271 393 :L
268 393 :L
265 393 :L
268 380 :L
eofill
8.5 268.25 385 @w
90 180 36 27 304.5 394 @n
np 286 380 :M
289 393 :L
286 393 :L
283 393 :L
286 380 :L
eofill
8.5 286.25 385 @w
90 180 36 27 322.5 394 @n
np 304 380 :M
307 393 :L
304 393 :L
301 393 :L
304 380 :L
eofill
8.5 304.25 385 @w
59.5 286 407.25 @c
349 402 88 12 rC
350 411 :M
f57 sf
(regions of memory)S
gR
.75 G
2 lw
gS 177 270 261 145 rC
9 8 286.5 330 @f
365 353 8 15 rC
366 364 :M
0 G
f209 sf
(\245)S
gR
gS 374 357 8 15 rC
375 368 :M
0 G
f209 sf
(\245)S
gR
gS 383 362 8 15 rC
384 373 :M
0 G
f209 sf
(\245)S
gR
gS 30 31 552 730 rC
148 432 :M
0 G
f106 sf
(\245)S
162 432 :M
.429 .043(Interoperability:  \(If you change mapping decision for)J
162 445 :M
.26 .026(one array, it should be possible to use that array in a)J
162 458 :M
.333 .033(program that normally uses other arrays.\))J
108 485 :M
f134 sf
.017 .002(The role of OOP:)J
f106 sf
.014 .001(  OOP is a very good way to achieve this)J
135 498 :M
.165(separation.)A
148 525 :M
(\245)S
162 525 :M
.216 .022(You can use o-o to achieve incrementality.  You use it to)J
162 538 :M
.417 .042(get an internal module structure that allows)J
162 551 :M
.102(customization.)A
148 571 :M
(\245)S
162 571 :M
.199 .02(O-o can also be used to achieve scope control.  In the)J
162 584 :M
.017 .002(VM systems, they got scope control by using OOP to get)J
162 597 :M
.184 .018(a kind of cartesian coordinate system.  In the slide,)J
162 610 :M
.502 .05(vertical axes are individual regions of memory;)J
162 623 :M
.348 .035(horizontal axes are operations on those regions.  OOP)J
162 636 :M
.454 .045(allows clients to choose a different page-to-flush)J
162 649 :M
.393 .039(operation for one region of memory.)J
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(; page: 14 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f198 sf
.306(\323)A
f57 sf
.772 .077( 1998 Edward F. Gehringer\312\312\312CSC 517/ECE 517 Lecture Notes, Spring 1998)J
522 754 :M
.661(206)A
135 82 :M
f106 sf
.294 .029(One combination of base/meta separation and OOP is the)J
135 95 :M
.06 .006(concept of meta-object protocol.  It is a system that gives)J
135 108 :M
.143 .014(clients control over internal aspects of the system:  Base &)J
135 121 :M
.126 .013(meta interfaces; OOP for scope, incrementality, meta objects)J
135 134 :M
.192 .019(in the meta interface.)J
135 161 :M
f134 sf
.369 .037(One more design goal: efficiency.)J
f106 sf
.234 .023(  This is one reason why we)J
135 174 :M
.367 .037(said, We need to give clients more control over mapping)J
135 187 :M
.293 .029(decisions.  We need to be sure that giving clients control)J
135 200 :M
.228 .023(doesn\325t cost us more efficiency than it gains.)J
135 227 :M
.335 .034(Let me make the observation that the game we\325re playing is)J
135 240 :M
.636 .064(all about binding time.)J
135 267 :M
.267 .027(The later you make the decision, the more control client has:)J
10 139.5 284 @w
10 204.5 284 @w
10 269.5 284 @w
10 334.5 284 @w
10 399.5 284 @w
10 464.5 284 @w
150 307 :M
f57 sf
.151(Substrate)A
212 307 :M
.11(Application)A
284 307 :M
.056(Compile)A
356 307 :M
.255(Load)A
423 307 :M
.331(Run)A
1 139.5 294 @w
64 140 294.5 @c
1 204.5 294 @w
64 205 294.5 @c
1 269.5 294 @w
64 270 294.5 @c
1 334.5 294 @w
64 335 294.5 @c
1 399.5 294 @w
64 400 294.5 @c
1 464.5 294 @w
14 139.5 295 @w
14 204.5 295 @w
14 269.5 295 @w
14 334.5 295 @w
14 399.5 295 @w
14 464.5 295 @w
157 318 :M
.309(design)A
222 318 :M
.309(design)A
171 349 :M
f220 sf
.089(\254)A
f106 sf
.125 .013(  Easier to recover)J
191 363 :M
.238(decision-making)A
229 376 :M
.283(overhead)A
317 349 :M
.129 .013(More is known;  )J
f220 sf
(\256)S
317 363 :M
f106 sf
.734 .073(potentially better)J
317 376 :M
.249(decisions)A
135 402 :M
.4 .04(This period of time between compile- and run-time that we\325ve)J
135 415 :M
.557 .056(traditionally thought about as being very quantized can)J
135 428 :M
.157 .016(actually be thought of as more of a spectrum.)J
135 455 :M
.253 .025(For any critical operation, you\325ll run it a number of times.  So)J
135 468 :M
.176 .018(maybe you can defer some of the work from the first running)J
135 481 :M
.099 .01(to later runs.)J
135 508 :M
.522 .052(There has been some work on advanced compiler)J
135 521 :M
.531 .053(techniques to allow code to be generated)J
148 548 :M
(\245)S
162 548 :M
1.482 .148(when needed)J
148 561 :M
(\245)S
162 561 :M
.147(customized)A
148 574 :M
(\245)S
162 574 :M
1.021 .102(highly optimized.)J
135 600 :M
.387 .039(There\325s a triad of techniques)J
148 627 :M
(\245)S
162 627 :M
1.104 .11(Partial evaluation)J
148 640 :M
(\245)S
162 640 :M
1.099 .11(Lazy evaluation)J
148 653 :M
(\245)S
162 653 :M
.6 .06(Run-time code generation.)J
135 679 :M
.354 .035(There has been a lot of work on this in Smalltalk and Self)J
135 692 :M
.155(implementations.)A
endp
%%Page: 15 15
%%BeginPageSetup
initializepage
(; page: 15 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f57 sf
.733 .073(Lecture 1)J
222 754 :M
.284 .028(Advanced Topics in Object-Oriented Systems)J
522 754 :M
.661(207)A
135 82 :M
f106 sf
.419 .042(One relevant paper is a little-known paper from SOSP \32589 by)J
135 95 :M
.457 .046(Henry Massalin and Calton Pu, \322Threads and input/output in)J
135 108 :M
.402 .04(the synthesis kernel.\323)J
144 134 :M
f57 sf
.234 .023(\322We have introduced the principles of code synthesis \311 frequently)J
144 145 :M
-.007(executed synthesis kernel calls are \322compiled\323 and optimized at run time)A
144 156 :M
-.053(using ideas similar to currying and constant folding \311 when we open a file)A
144 167 :M
-.038(for input, a custom-made \(thus short and fast\) read routine is returned for)A
144 178 :M
-.124(later read calls.\323)A
135 201 :M
f106 sf
.375 .037(File-system implementation is constantly being tuned to suit a)J
135 214 :M
.617 .062(particular implementation and a particular file.)J
135 241 :M
.358 .036(While there\325s no meta-interface per se, this technology can)J
135 254 :M
.309 .031(be used to get efficient meta-interfaces, because it allows)J
135 267 :M
.601 .06(very late binding of mapping decisions.)J
135 294 :M
f134 sf
.341 .034(Another summary:)J
f106 sf
.144 .014(  We are engineers, and our chief task is to)J
135 307 :M
.594 .059(control complexity.)J
135 334 :M
.194 .019(The basic tools that we use to do that are abstraction and)J
135 347 :M
.178(decomposition.)A
135 374 :M
.362 .036(In our discipline to date, we have tried a particular abstraction)J
135 387 :M
.367 .037(framework, called black-box abstraction, which attempts to)J
135 400 :M
.747 .075(expose functionality and hide implementation.)J
135 427 :M
.637 .064(We\325ve run into problems, because mapping decisions)J
135 440 :M
.394 .039(nonetheless show through.  That leads to hematomas and)J
135 453 :M
.408 .041(coding between the lines in clients of these abstractions.)J
135 480 :M
.373 .037(The fundamental problem is that clients need control over the)J
135 493 :M
1.226 .123(mapping decisions.)J
135 520 :M
.475 .048(Many systems exposed various kinds of mapping decisions.)J
135 547 :M
.249 .025(If we are going to give clients control, you still need to control)J
135 560 :M
.159 .016(complexity.  If you can\325t conquer, you should at least divide.  I)J
135 573 :M
.611 .061(talked about principles like scope control and incrementality)J
135 586 :M
.096 .01(that are important to getting that right.)J
135 613 :M
.224 .022(We can look at work on computational reflection, OOP, and)J
135 626 :M
.335 .034(compiler techniques.  We can use case studies to learn how)J
135 639 :M
.247 .025(to design systems that are going to give clients the control)J
135 652 :M
.185 .018(that they need.)J
endp
%%Page: 16 16
%%BeginPageSetup
initializepage
(; page: 16 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f198 sf
.306(\323)A
f57 sf
.772 .077( 1998 Edward F. Gehringer\312\312\312CSC 517/ECE 517 Lecture Notes, Spring 1998)J
522 754 :M
.661(208)A
108 82 :M
f134 sf
.334 .033(Value of this new abstraction framework:)J
148 109 :M
f106 sf
(\245)S
162 109 :M
.28 .028(Allows us to talk about code bloat, \322This hematoma)J
162 122 :M
.41 .041(comes from a mapping decision \311\323)J
148 142 :M
(\245)S
162 142 :M
.185 .018(We can request features from the module designer:  \322I)J
162 155 :M
.588 .059(need control over this mapping decision.\323)J
148 175 :M
(\245)S
162 175 :M
.543 .054(Helps us to evaluate module designs:)J
179 199 :M
cF
f220 sf
(\260)S
setfont
193 197 :M
.525 .053(\322How good is the base/meta separation?\323)J
179 213 :M
cF
f220 sf
(\260)S
setfont
193 211 :M
.559 .056(\322How fine-grained is the scope control?\323)J
179 227 :M
cF
f220 sf
(\260)S
setfont
193 225 :M
.554 .055(\322How good is the incrementality?\323)J
179 241 :M
cF
f220 sf
(\260)S
setfont
193 239 :M
.412 .041(\322What technology does this meta-interface use?\323)J
135 265 :M
.156 .016(I have tried to lay out the framework of a new abstraction)J
135 278 :M
-.015(structure.  There is a lot of work left to do.)A
135 305 :M
f134 sf
.147 .015(Other issues:)J
148 325 :M
f106 sf
(\245)S
162 325 :M
.347 .035(How to specify mapping dilemmas.  I think we will need)J
162 338 :M
.383 .038(to learn new methodologies.  I think they will be highly)J
162 351 :M
.074(iterative.)A
148 371 :M
(\245)S
162 371 :M
.584 .058(Specification.  How will we deal with giving clients)J
162 384 :M
.516 .052(control over implementation decisions in a way they will)J
162 397 :M
.231(understand?)A
148 417 :M
(\245)S
162 417 :M
.211 .021(Verification.  If clients are to be able to change)J
162 430 :M
.116 .012(something, we have to be able to test the system.)J
148 450 :M
(\245)S
162 450 :M
.374 .037(Functionality dilemmas.  This talk has motivated giving)J
162 463 :M
.499 .05(clients control based entirely on a performance)J
162 476 :M
.302 .03(argument.  But one of things we learned on CLOS meta-)J
162 489 :M
.316 .032(object protocol is that sometimes clients want to change)J
162 502 :M
.227 .023(the behavior or semantics of the system, in addition to)J
162 515 :M
.485 .048(changing the mapping decision.  We have to provide)J
162 528 :M
(ways to do that.)S
108 554 :M
f134 sf
.103(Summary:)A
f106 sf
.242 .024(  I have been talking about a new set of words and way)J
135 567 :M
.551 .055(of understanding an old problem that will help us build)J
135 580 :M
.089 .009(systems that are important today.)J
135 607 :M
.234 .023(Let\325s look a little farther in the future and see what is really)J
135 620 :M
.913 .091(going on.)J
148 647 :M
(\245)S
162 647 :M
.332 .033(We tried to take an abstraction mechanism and hide)J
162 660 :M
.435 .044(implementation.  That didn\325t work, because)J
162 673 :M
.945 .094(implementation showed through.)J
162 693 :M
.324 .032(We knew from the beginning that those interfaces were)J
162 706 :M
.455 .046(only partial descriptions of what was going on.)J
endp
%%Page: 17 17
%%BeginPageSetup
initializepage
(; page: 17 of 17)setjob
%%EndPageSetup
-30 -31 :T
gS 30 31 552 730 rC
108 754 :M
f57 sf
.733 .073(Lecture 1)J
222 754 :M
.284 .028(Advanced Topics in Object-Oriented Systems)J
522 754 :M
.661(209)A
162 82 :M
f106 sf
.363 .036(We designed them that way because what is really)J
162 95 :M
.259 .026(going on is much too complicated for us to cope with.)J
148 122 :M
(\245)S
162 122 :M
.542 .054(The same is true in any engineering discipline.)J
162 135 :M
.3 .03(Suppose I want to build a simple \322brick\323 out of blocks.)J
162 148 :M
.23 .023(This is really a complex system; several forces are)J
162 161 :M
.456 .046(acting on blocks.)J
162 181 :M
.609 .061(Other engineering disciplines deal with the problem that)J
162 194 :M
.35 .035(no one description can capture the complexity of the)J
162 207 :M
.322 .032(system.  So they have multiple descriptions to capture)J
162 220 :M
.34 .034(more or less detail.)J
162 240 :M
.388 .039(Other descriptions capture entirely different issues.)J
148 260 :M
(\245)S
162 260 :M
1.08 .108(In software, we have a very similar situation.  We have)J
162 273 :M
.781 .078(abstract descriptions like high-level pseudo-code.)J
162 293 :M
.436 .044(Many things aren\325t said.)J
162 313 :M
.504 .05(Can be \322run\323 to automatically produce complete)J
162 326 :M
.232 .023(behavior.  \(That is unique to software.\))J
162 346 :M
.421 .042(The substrate implementation fills in the missing pieces.)J
135 373 :M
.142 .014(What would it mean to have the best of our side of)J
135 386 :M
.872 .087(engineering and their side of engineering?)J
135 413 :M
f134 sf
.295 .03(Long-term goal: )J
f106 sf
.247 .025(The best of both worlds.)J
148 440 :M
(\245)S
162 440 :M
.402 .04(Abstract descriptions to manage complexity.)J
148 460 :M
(\245)S
162 460 :M
.276 .028(Multiple descriptions to cover all of what matters.)J
148 480 :M
(\245)S
162 480 :M
.558 .056(Automatic combination and execution, because that\325s)J
162 493 :M
.503 .05(what\325s special about software.)J
135 520 :M
.154 .015(One description has to work hard not to say things, so that)J
135 533 :M
.432 .043(they can be said in another description.)J
135 560 :M
.619 .062(We need multiple, automatically combined and executed)J
135 573 :M
.138(descriptions.)A
135 600 :M
.254 .025(This is a long-term goal, but today we have seen some steps)J
135 613 :M
.448 .045(in this direction.)J
endp
%%Trailer
end
%%EOF
